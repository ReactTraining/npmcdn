'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.sendText = sendText;
exports.sendInvalidURLError = sendInvalidURLError;
exports.sendNotFoundError = sendNotFoundError;
exports.sendServerError = sendServerError;
exports.sendRedirect = sendRedirect;
exports.sendFile = sendFile;

var _mime = require('mime');

var _mime2 = _interopRequireDefault(_mime);

var _fs = require('fs');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function sendText(res, statusCode, text) {
  res.writeHead(statusCode, {
    'Content-Type': 'text/plain',
    'Content-Length': text.length
  });

  res.end(text);
}

function sendInvalidURLError(res, url) {
  sendText(res, 403, 'Invalid URL: ' + url);
}

function sendNotFoundError(res, what) {
  sendText(res, 404, 'Not found: ' + what);
}

function sendServerError(res, error) {
  sendText(res, 500, 'Server error: ' + error.message);
}

function sendRedirect(res, location) {
  var statusCode = arguments.length <= 2 || arguments[2] === undefined ? 302 : arguments[2];

  var html = '<p>You are being redirected to <a href="' + location + '">' + location + '</a>';

  res.writeHead(statusCode, {
    'Content-Type': 'text/html',
    'Content-Length': html.length,
    'Location': location
  });

  res.end(html);
}

function sendFile(res, file) {
  var maxAge = arguments.length <= 2 || arguments[2] === undefined ? 0 : arguments[2];

  (0, _fs.stat)(file, function (error, stat) {
    if (error) {
      sendServerError(res, error);
    } else {
      res.writeHead(200, {
        'Content-Type': _mime2.default.lookup(file) + '; charset=utf-8',
        'Content-Length': stat.size,
        'Cache-Control': 'public, max-age=' + maxAge
      });

      var stream = (0, _fs.createReadStream)(file);

      stream.on('error', function (error) {
        sendServerError(res, error);
      });

      stream.pipe(res);
    }
  });
}