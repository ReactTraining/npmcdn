'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _path = require('path');

var _fs = require('fs');

var _getProperty = require('./getProperty');

var _getProperty2 = _interopRequireDefault(_getProperty);

var _archiver = require('archiver');

var _archiver2 = _interopRequireDefault(_archiver);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function generateZip(tarballDir, packageVersion, callback) {
  (0, _fs.readFile)((0, _path.join)(tarballDir, 'bower.json'), 'utf8', function (error, bowerJSON) {
    if (error) {
      callback(error);
      return;
    }

    var bowerConfig = Object.assign(JSON.parse(bowerJSON), { version: packageVersion });
    var main = (0, _getProperty2.default)(bowerConfig, 'main');
    var files = Array.isArray(main) ? main : [main];
    var bowerZip = (0, _path.join)(tarballDir, 'bower.zip');
    var out = (0, _fs.createWriteStream)(bowerZip);

    var zip = (0, _archiver2.default)('zip', {});
    var callbackWasCalled = false;

    function onError(error) {
      if (callbackWasCalled) return;

      callbackWasCalled = true;
      callback(error);
    }

    function onFinish() {
      if (callbackWasCalled) return;

      callbackWasCalled = true;
      callback(null, bowerZip);
    }

    zip.on('error', onError);
    out.on('error', onError);
    out.on('finish', onFinish);

    zip.pipe(out);

    // add `bower.json` file with updated version
    zip.append(JSON.stringify(bowerConfig, null, 2), { name: 'bower.json' });

    // add all files from `main` section of Bower config
    files.forEach(function (file) {
      zip.file((0, _path.join)(tarballDir, file), { name: file });
    });

    zip.finalize();
  });
}

function createBowerPackage(tarballDir, callback) {
  (0, _fs.stat)((0, _path.join)(tarballDir, 'bower.json'), function (error, stat) {
    if (error || !stat.isFile()) {
      callback(new Error('Missing bower.json'));
      return;
    }

    (0, _fs.readFile)((0, _path.join)(tarballDir, 'package.json'), 'utf8', function (error, packageJSON) {
      if (error) {
        callback(error);
        return;
      }

      var packageVersion = (0, _getProperty2.default)(JSON.parse(packageJSON), 'version');

      generateZip(tarballDir, packageVersion, callback);
    });
  });
}

exports.default = createBowerPackage;