'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _lruCache = require('lru-cache');

var _lruCache2 = _interopRequireDefault(_lruCache);

var _request = require('request');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function getPackageInfoFromRegistry(registryURL, packageName, callback) {
  var encodedPackageName = undefined;
  if (packageName.charAt(0) === '@') {
    encodedPackageName = '@' + encodeURIComponent(packageName.substring(1));
  } else {
    encodedPackageName = encodeURIComponent(packageName);
  }

  (0, _request.get)({
    uri: registryURL + '/' + encodedPackageName,
    headers: {
      'Accept': 'application/json'
    }
  }, function (error, res) {
    callback(error, res && res.body ? JSON.parse(res.body) : null);
  });
}

var OneMinute = 60 * 1000;
var RegistryCache = (0, _lruCache2.default)({
  max: 500,
  maxAge: OneMinute
});

function getPackageInfo(registryURL, packageName, callback) {
  var cacheKey = registryURL + packageName;
  var info = RegistryCache.get(cacheKey);

  if (info) {
    callback(null, info);
  } else {
    getPackageInfoFromRegistry(registryURL, packageName, function (error, registryInfo) {
      if (registryInfo) RegistryCache.set(cacheKey, registryInfo);

      callback(error, registryInfo);
    });
  }
}

exports.default = getPackageInfo;